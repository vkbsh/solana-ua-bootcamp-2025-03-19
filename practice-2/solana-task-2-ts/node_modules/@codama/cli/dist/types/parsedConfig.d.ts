import type { RootNode } from '@codama/nodes';
import { Command } from 'commander';
import { ScriptName, VisitorPath } from './config';
import { ProgramOptions } from './programOptions';
export type ParsedConfig = Readonly<{
    configPath: string | null;
    idlContent: unknown;
    idlPath: string;
    rootNode: RootNode;
    scripts: ParsedScriptsConfig;
    before: readonly ParsedVisitorConfig[];
}>;
export type ParsedScriptsConfig = Readonly<Record<ScriptName, readonly ParsedVisitorConfig[]>>;
export type ParsedVisitorConfig<T extends readonly unknown[] = readonly unknown[]> = Readonly<{
    args: T;
    index: number;
    item: string | undefined;
    path: VisitorPath;
    script: ScriptName | null;
}>;
export declare function getParsedConfigFromCommand(cmd: Command): Promise<ParsedConfig>;
export declare function getParsedConfig(options: Pick<ProgramOptions, 'config' | 'idl'>): Promise<ParsedConfig>;
//# sourceMappingURL=parsedConfig.d.ts.map