import type { StructFieldTypeNode, TypeNode, ValueNode } from '@codama/node-types';
import { DocsInput } from '../shared';
export type StructFieldTypeNodeInput<TType extends TypeNode = TypeNode, TDefaultValue extends ValueNode | undefined = ValueNode | undefined> = Omit<StructFieldTypeNode<TType, TDefaultValue>, 'docs' | 'kind' | 'name'> & {
    readonly docs?: DocsInput;
    readonly name: string;
};
export declare function structFieldTypeNode<TType extends TypeNode, TDefaultValue extends ValueNode | undefined = undefined>(input: StructFieldTypeNodeInput<TType, TDefaultValue>): StructFieldTypeNode<TType, TDefaultValue>;
//# sourceMappingURL=StructFieldTypeNode.d.ts.map