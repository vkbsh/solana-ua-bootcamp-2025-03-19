import type { BytesEncoding, ConstantPdaSeedNode, ProgramIdValueNode, TypeNode, ValueNode } from '@codama/node-types';
export declare function constantPdaSeedNode<TType extends TypeNode, TValue extends ProgramIdValueNode | ValueNode>(type: TType, value: TValue): ConstantPdaSeedNode<TType, TValue>;
export declare function constantPdaSeedNodeFromProgramId(): ConstantPdaSeedNode<import("@codama/node-types").PublicKeyTypeNode, ProgramIdValueNode>;
export declare function constantPdaSeedNodeFromString<TEncoding extends BytesEncoding>(encoding: TEncoding, string: string): ConstantPdaSeedNode<import("@codama/node-types").StringTypeNode<TEncoding>, import("@codama/node-types").StringValueNode>;
export declare function constantPdaSeedNodeFromBytes<TEncoding extends BytesEncoding>(encoding: TEncoding, data: string): ConstantPdaSeedNode<import("@codama/node-types").BytesTypeNode, import("@codama/node-types").BytesValueNode>;
//# sourceMappingURL=ConstantPdaSeedNode.d.ts.map