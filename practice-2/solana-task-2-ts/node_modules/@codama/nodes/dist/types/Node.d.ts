import type { GetNodeFromKind, Node, NodeKind } from '@codama/node-types';
export declare const REGISTERED_NODE_KINDS: ("accountBumpValueNode" | "accountValueNode" | "argumentValueNode" | "resolverValueNode" | "conditionalValueNode" | "arrayValueNode" | "bytesValueNode" | "booleanValueNode" | "constantValueNode" | "enumValueNode" | "mapValueNode" | "noneValueNode" | "numberValueNode" | "setValueNode" | "someValueNode" | "structValueNode" | "tupleValueNode" | "publicKeyValueNode" | "stringValueNode" | "mapEntryValueNode" | "structFieldValueNode" | "identityValueNode" | "payerValueNode" | "pdaValueNode" | "programIdValueNode" | "pdaSeedValueNode" | "programLinkNode" | "accountLinkNode" | "definedTypeLinkNode" | "instructionLinkNode" | "instructionAccountLinkNode" | "instructionArgumentLinkNode" | "pdaLinkNode" | "pdaNode" | "fixedCountNode" | "remainderCountNode" | "prefixedCountNode" | "amountTypeNode" | "arrayTypeNode" | "booleanTypeNode" | "bytesTypeNode" | "dateTimeTypeNode" | "enumTypeNode" | "fixedSizeTypeNode" | "hiddenPrefixTypeNode" | "hiddenSuffixTypeNode" | "mapTypeNode" | "numberTypeNode" | "optionTypeNode" | "postOffsetTypeNode" | "preOffsetTypeNode" | "publicKeyTypeNode" | "remainderOptionTypeNode" | "sentinelTypeNode" | "setTypeNode" | "sizePrefixTypeNode" | "solAmountTypeNode" | "stringTypeNode" | "structTypeNode" | "tupleTypeNode" | "zeroableOptionTypeNode" | "constantDiscriminatorNode" | "fieldDiscriminatorNode" | "sizeDiscriminatorNode" | "constantPdaSeedNode" | "variablePdaSeedNode" | "enumEmptyVariantTypeNode" | "enumStructVariantTypeNode" | "enumTupleVariantTypeNode" | "structFieldTypeNode" | "rootNode" | "programNode" | "accountNode" | "instructionAccountNode" | "instructionArgumentNode" | "instructionByteDeltaNode" | "instructionNode" | "instructionRemainingAccountsNode" | "errorNode" | "definedTypeNode")[];
export declare function isNode<TKind extends NodeKind>(node: Node | null | undefined, kind: TKind | TKind[]): node is GetNodeFromKind<TKind>;
export declare function assertIsNode<TKind extends NodeKind>(node: Node | null | undefined, kind: TKind | TKind[]): asserts node is GetNodeFromKind<TKind>;
export declare function isNodeFilter<TKind extends NodeKind>(kind: TKind | TKind[]): (node: Node | null | undefined) => node is GetNodeFromKind<TKind>;
export declare function assertIsNodeFilter<TKind extends NodeKind>(kind: TKind | TKind[]): (node: Node | null | undefined) => node is GetNodeFromKind<TKind>;
export declare function removeNullAndAssertIsNodeFilter<TKind extends NodeKind>(kind: TKind | TKind[]): (node: Node | null | undefined) => node is GetNodeFromKind<TKind>;
//# sourceMappingURL=Node.d.ts.map