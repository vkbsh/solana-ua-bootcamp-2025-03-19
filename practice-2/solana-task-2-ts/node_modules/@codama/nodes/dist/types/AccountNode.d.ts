import type { AccountNode, DiscriminatorNode, NestedTypeNode, PdaLinkNode, StructTypeNode } from '@codama/node-types';
import { DocsInput } from './shared';
export type AccountNodeInput<TData extends NestedTypeNode<StructTypeNode> = NestedTypeNode<StructTypeNode>, TPda extends PdaLinkNode | undefined = PdaLinkNode | undefined, TDiscriminators extends DiscriminatorNode[] | undefined = DiscriminatorNode[] | undefined> = Omit<AccountNode<TData, TPda, TDiscriminators>, 'data' | 'docs' | 'kind' | 'name'> & {
    readonly data?: TData;
    readonly docs?: DocsInput;
    readonly name: string;
};
export declare function accountNode<TData extends NestedTypeNode<StructTypeNode> = StructTypeNode<[]>, TPda extends PdaLinkNode | undefined = undefined, const TDiscriminators extends DiscriminatorNode[] | undefined = undefined>(input: AccountNodeInput<TData, TPda, TDiscriminators>): AccountNode<TData, TPda, TDiscriminators>;
//# sourceMappingURL=AccountNode.d.ts.map