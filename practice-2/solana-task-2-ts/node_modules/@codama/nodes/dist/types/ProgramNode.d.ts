import type { AccountNode, DefinedTypeNode, ErrorNode, InstructionNode, PdaNode, ProgramNode, RootNode } from '@codama/node-types';
import { DocsInput } from './shared';
export type ProgramNodeInput<TPdas extends PdaNode[] = PdaNode[], TAccounts extends AccountNode[] = AccountNode[], TInstructions extends InstructionNode[] = InstructionNode[], TDefinedTypes extends DefinedTypeNode[] = DefinedTypeNode[], TErrors extends ErrorNode[] = ErrorNode[]> = Omit<Partial<ProgramNode<TPdas, TAccounts, TInstructions, TDefinedTypes, TErrors>>, 'docs' | 'kind' | 'name' | 'publicKey'> & {
    readonly docs?: DocsInput;
    readonly name: string;
    readonly publicKey: ProgramNode['publicKey'];
};
export declare function programNode<const TPdas extends PdaNode[] = [], const TAccounts extends AccountNode[] = [], const TInstructions extends InstructionNode[] = [], const TDefinedTypes extends DefinedTypeNode[] = [], const TErrors extends ErrorNode[] = []>(input: ProgramNodeInput<TPdas, TAccounts, TInstructions, TDefinedTypes, TErrors>): ProgramNode<TPdas, TAccounts, TInstructions, TDefinedTypes, TErrors>;
export declare function getAllPrograms(node: ProgramNode | ProgramNode[] | RootNode): ProgramNode[];
export declare function getAllPdas(node: ProgramNode | ProgramNode[] | RootNode): PdaNode[];
export declare function getAllAccounts(node: ProgramNode | ProgramNode[] | RootNode): AccountNode[];
export declare function getAllDefinedTypes(node: ProgramNode | ProgramNode[] | RootNode): DefinedTypeNode[];
export declare function getAllInstructions(node: ProgramNode | ProgramNode[] | RootNode): InstructionNode[];
export declare function getAllErrors(node: ProgramNode | ProgramNode[] | RootNode): ErrorNode[];
//# sourceMappingURL=ProgramNode.d.ts.map