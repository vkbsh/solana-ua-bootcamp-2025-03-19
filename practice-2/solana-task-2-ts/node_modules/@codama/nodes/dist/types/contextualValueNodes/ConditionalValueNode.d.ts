import type { AccountValueNode, ArgumentValueNode, ConditionalValueNode, InstructionInputValueNode, ResolverValueNode, ValueNode } from '@codama/node-types';
type ConditionNode = AccountValueNode | ArgumentValueNode | ResolverValueNode;
export declare function conditionalValueNode<TCondition extends ConditionNode, TValue extends ValueNode | undefined = undefined, TIfTrue extends InstructionInputValueNode | undefined = undefined, TIfFalse extends InstructionInputValueNode | undefined = undefined>(input: {
    condition: TCondition;
    ifFalse?: TIfFalse;
    ifTrue?: TIfTrue;
    value?: TValue;
}): ConditionalValueNode<TCondition, TValue, TIfTrue, TIfFalse>;
export {};
//# sourceMappingURL=ConditionalValueNode.d.ts.map