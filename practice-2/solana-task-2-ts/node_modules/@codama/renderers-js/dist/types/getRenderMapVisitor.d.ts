import { CamelCaseString } from '@codama/nodes';
import { RenderMap } from '@codama/renderers-core';
import { LinkableDictionary } from '@codama/visitors-core';
import { TypeManifestVisitor } from './getTypeManifestVisitor';
import { NameApi, NameTransformers } from './nameTransformers';
import { CustomDataOptions, GetImportFromFunction, LinkOverrides, ParsedCustomDataOptions } from './utils';
export type GetRenderMapOptions = {
    asyncResolvers?: string[];
    customAccountData?: CustomDataOptions[];
    customInstructionData?: CustomDataOptions[];
    dependencyMap?: Record<string, string>;
    internalNodes?: string[];
    linkOverrides?: LinkOverrides;
    nameTransformers?: Partial<NameTransformers>;
    nonScalarEnums?: string[];
    renderParentInstructions?: boolean;
    useGranularImports?: boolean;
};
export type GlobalFragmentScope = {
    asyncResolvers: CamelCaseString[];
    customAccountData: ParsedCustomDataOptions;
    customInstructionData: ParsedCustomDataOptions;
    getImportFrom: GetImportFromFunction;
    linkables: LinkableDictionary;
    nameApi: NameApi;
    nonScalarEnums: CamelCaseString[];
    renderParentInstructions: boolean;
    typeManifestVisitor: TypeManifestVisitor;
};
export declare function getRenderMapVisitor(options?: GetRenderMapOptions): import("@codama/visitors-core").Visitor<RenderMap, "definedTypeNode" | "accountNode" | "instructionNode" | "pdaNode" | "programNode" | "rootNode">;
//# sourceMappingURL=getRenderMapVisitor.d.ts.map