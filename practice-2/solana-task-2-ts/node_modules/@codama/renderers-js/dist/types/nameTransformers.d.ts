export type NameTransformerHelpers = {
    camelCase: (name: string) => string;
    capitalize: (name: string) => string;
    kebabCase: (name: string) => string;
    pascalCase: (name: string) => string;
    snakeCase: (name: string) => string;
    titleCase: (name: string) => string;
};
export type NameTransformer = (name: string, helpers: NameTransformerHelpers) => string;
export type NameTransformerKey = 'accountDecodeFunction' | 'accountFetchAllFunction' | 'accountFetchAllMaybeFunction' | 'accountFetchFromSeedsFunction' | 'accountFetchFunction' | 'accountFetchMaybeFromSeedsFunction' | 'accountFetchMaybeFunction' | 'accountGetSizeFunction' | 'codecFunction' | 'constant' | 'constantFunction' | 'dataArgsType' | 'dataType' | 'decoderFunction' | 'discriminatedUnionDiscriminator' | 'discriminatedUnionFunction' | 'discriminatedUnionVariant' | 'encoderFunction' | 'enumVariant' | 'instructionAsyncFunction' | 'instructionAsyncInputType' | 'instructionDataType' | 'instructionExtraType' | 'instructionParsedType' | 'instructionParseFunction' | 'instructionSyncFunction' | 'instructionSyncInputType' | 'instructionType' | 'isDiscriminatedUnionFunction' | 'pdaFindFunction' | 'pdaSeedsType' | 'programAccountsEnum' | 'programAccountsEnumVariant' | 'programAccountsIdentifierFunction' | 'programAddressConstant' | 'programErrorConstant' | 'programErrorConstantPrefix' | 'programErrorMessagesMap' | 'programErrorUnion' | 'programGetErrorMessageFunction' | 'programInstructionsEnum' | 'programInstructionsEnumVariant' | 'programInstructionsIdentifierFunction' | 'programInstructionsParsedUnionType' | 'programIsErrorFunction' | 'resolverFunction';
export type NameTransformers = Record<NameTransformerKey, NameTransformer>;
export type NameApi = Record<NameTransformerKey, (name: string) => string>;
export declare function getNameApi(transformers: NameTransformers): NameApi;
export declare const DEFAULT_NAME_TRANSFORMERS: NameTransformers;
//# sourceMappingURL=nameTransformers.d.ts.map