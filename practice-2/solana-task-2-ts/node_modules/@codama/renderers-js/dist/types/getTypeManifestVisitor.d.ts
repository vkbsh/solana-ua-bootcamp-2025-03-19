import { CamelCaseString } from '@codama/nodes';
import { LinkableDictionary, NodeStack, Visitor } from '@codama/visitors-core';
import { NameApi } from './nameTransformers';
import { TypeManifest } from './TypeManifest';
import { GetImportFromFunction, ParsedCustomDataOptions } from './utils';
export type TypeManifestVisitor = ReturnType<typeof getTypeManifestVisitor>;
export declare function getTypeManifestVisitor(input: {
    customAccountData: ParsedCustomDataOptions;
    customInstructionData: ParsedCustomDataOptions;
    getImportFrom: GetImportFromFunction;
    linkables: LinkableDictionary;
    nameApi: NameApi;
    nonScalarEnums: CamelCaseString[];
    stack?: NodeStack;
}): Visitor<TypeManifest, "numberValueNode" | "arrayValueNode" | "booleanValueNode" | "bytesValueNode" | "constantValueNode" | "enumValueNode" | "mapValueNode" | "publicKeyValueNode" | "setValueNode" | "someValueNode" | "stringValueNode" | "structValueNode" | "tupleValueNode" | "definedTypeNode" | "definedTypeLinkNode" | "enumEmptyVariantTypeNode" | "enumStructVariantTypeNode" | "enumTupleVariantTypeNode" | "amountTypeNode" | "arrayTypeNode" | "booleanTypeNode" | "dateTimeTypeNode" | "enumTypeNode" | "fixedSizeTypeNode" | "hiddenPrefixTypeNode" | "hiddenSuffixTypeNode" | "mapTypeNode" | "numberTypeNode" | "optionTypeNode" | "postOffsetTypeNode" | "preOffsetTypeNode" | "remainderOptionTypeNode" | "sentinelTypeNode" | "setTypeNode" | "sizePrefixTypeNode" | "solAmountTypeNode" | "stringTypeNode" | "structTypeNode" | "tupleTypeNode" | "zeroableOptionTypeNode" | "mapEntryValueNode" | "structFieldValueNode" | "accountNode" | "instructionNode" | "structFieldTypeNode" | "noneValueNode" | "bytesTypeNode" | "publicKeyTypeNode">;
//# sourceMappingURL=getTypeManifestVisitor.d.ts.map