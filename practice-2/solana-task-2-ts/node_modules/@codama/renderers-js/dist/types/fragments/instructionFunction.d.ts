import { InstructionNode } from '@codama/nodes';
import { NodePath, ResolvedInstructionInput } from '@codama/visitors-core';
import type { GlobalFragmentScope } from '../getRenderMapVisitor';
import { TypeManifest } from '../TypeManifest';
import { Fragment } from './common';
export declare function getInstructionFunctionFragment(scope: Pick<GlobalFragmentScope, 'asyncResolvers' | 'customInstructionData' | 'getImportFrom' | 'nameApi' | 'typeManifestVisitor'> & {
    dataArgsManifest: TypeManifest;
    extraArgsManifest: TypeManifest;
    instructionPath: NodePath<InstructionNode>;
    renamedArgs: Map<string, string>;
    resolvedInputs: ResolvedInstructionInput[];
    useAsync: boolean;
}): Fragment;
//# sourceMappingURL=instructionFunction.d.ts.map